// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository.go -package=mock -destination=./mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/tsusowake/go.server/internal/domain/auth/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ctx)
}

// GetByID mocks base method.
func (m *MockUser) GetByID(ctx context.Context, id string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUser)(nil).GetByID), ctx, id)
}

// MockUserCredential is a mock of UserCredential interface.
type MockUserCredential struct {
	ctrl     *gomock.Controller
	recorder *MockUserCredentialMockRecorder
}

// MockUserCredentialMockRecorder is the mock recorder for MockUserCredential.
type MockUserCredentialMockRecorder struct {
	mock *MockUserCredential
}

// NewMockUserCredential creates a new mock instance.
func NewMockUserCredential(ctrl *gomock.Controller) *MockUserCredential {
	mock := &MockUserCredential{ctrl: ctrl}
	mock.recorder = &MockUserCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCredential) EXPECT() *MockUserCredentialMockRecorder {
	return m.recorder
}

// MockUserEmail is a mock of UserEmail interface.
type MockUserEmail struct {
	ctrl     *gomock.Controller
	recorder *MockUserEmailMockRecorder
}

// MockUserEmailMockRecorder is the mock recorder for MockUserEmail.
type MockUserEmailMockRecorder struct {
	mock *MockUserEmail
}

// NewMockUserEmail creates a new mock instance.
func NewMockUserEmail(ctrl *gomock.Controller) *MockUserEmail {
	mock := &MockUserEmail{ctrl: ctrl}
	mock.recorder = &MockUserEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEmail) EXPECT() *MockUserEmailMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockUserEmail) GetByUserID(ctx context.Context, userID string) (*entity.UserEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(*entity.UserEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockUserEmailMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockUserEmail)(nil).GetByUserID), ctx, userID)
}

// MockUserLock is a mock of UserLock interface.
type MockUserLock struct {
	ctrl     *gomock.Controller
	recorder *MockUserLockMockRecorder
}

// MockUserLockMockRecorder is the mock recorder for MockUserLock.
type MockUserLockMockRecorder struct {
	mock *MockUserLock
}

// NewMockUserLock creates a new mock instance.
func NewMockUserLock(ctrl *gomock.Controller) *MockUserLock {
	mock := &MockUserLock{ctrl: ctrl}
	mock.recorder = &MockUserLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLock) EXPECT() *MockUserLockMockRecorder {
	return m.recorder
}
